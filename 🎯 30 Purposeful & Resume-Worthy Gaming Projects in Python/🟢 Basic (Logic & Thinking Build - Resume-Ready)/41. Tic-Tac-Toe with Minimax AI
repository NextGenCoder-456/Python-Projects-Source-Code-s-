# Tic-Tac-Toe Game with unbeatable Minimax AI

import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def is_winner(board, player):
    win_states = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[0][2], board[1][1], board[2][0]],
    ]
    return [player, player, player] in win_states

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

def minimax(board, depth, is_maximizing):
    if is_winner(board, "O"):
        return 1
    elif is_winner(board, "X"):
        return -1
    elif not get_empty_cells(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i, j in get_empty_cells(board):
            board[i][j] = "O"
            score = minimax(board, depth + 1, False)
            board[i][j] = " "
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i, j in get_empty_cells(board):
            board[i][j] = "X"
            score = minimax(board, depth + 1, True)
            board[i][j] = " "
            best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = None
    for i, j in get_empty_cells(board):
        board[i][j] = "O"
        score = minimax(board, 0, False)
        board[i][j] = " "
        if score > best_score:
            best_score = score
            move = (i, j)
    return move

def main():
    board = [[" "] * 3 for _ in range(3)]
    print("Tic-Tac-Toe with Minimax AI\nYou are X, AI is O")
    while True:
        print_board(board)
        if is_winner(board, "O"):
            print("AI Wins!")
            break
        elif is_winner(board, "X"):
            print("You Win!")
            break
        elif not get_empty_cells(board):
            print("Draw!")
            break

        if len(get_empty_cells(board)) % 2 == 1:
            i, j = map(int, input("Enter your move (row col): ").split())
            if board[i][j] == " ":
                board[i][j] = "X"
        else:
            i, j = best_move(board)
            board[i][j] = "O"

if __name__ == "__main__":
    main()
